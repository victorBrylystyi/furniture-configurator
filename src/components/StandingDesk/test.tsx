/* eslint-disable no-lone-blocks */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useSnapshot } from 'valtio'
import { state } from '../../store'
import { useFrame } from '@react-three/fiber'
import { useCallback, useEffect, useRef } from 'react'
import { MaterialTypes, TableHeightTypes } from '../../helpers/types'
import { damp } from 'maath/easing'
import { useTableTextures } from '../../hooks/useTableTextures'

type GLTFResult = GLTF & {
  nodes: {
    Cube018: THREE.Mesh
    Cube018_1: THREE.Mesh
    Desk_low: THREE.Mesh
    feet_low: THREE.Mesh
  }
  materials: {
    main_body: THREE.MeshStandardMaterial
    small_screen: THREE.MeshStandardMaterial
  }
}

const _c = new THREE.Color();

let foo = {
  bar: 0
}


export const StandingDeskTest = (props: JSX.IntrinsicElements['group']) => {
  const feetRef = useRef<THREE.Mesh|null>(null);
  const coverRef = useRef<THREE.Mesh|null>(null);
  const displayRef = useRef<THREE.Mesh|null>(null);
  const { nodes, materials } = useGLTF('/models/standing_desk.glb') as GLTFResult;
  // const [colorMap] = useTexture([
  //   '/textures/v1/Metal036_1K-JPG/Metal036_1K-JPG_Color.jpg',
  //   // 'PavingStones092_1K_Displacement.jpg',
  //   // 'PavingStones092_1K_Normal.jpg',
  //   // 'PavingStones092_1K_Roughness.jpg',
  //   // 'PavingStones092_1K_AmbientOcclusion.jpg',
  // ]) 

  // const { v1 } = useTableTextures();


  const {tableLegsColor, tableCoverColor, tableHeight, materials: tableMaterial} = useSnapshot(state);

  // console.log(v1)

  // useEffect(() => {

  //   if (coverRef.current && v1.length) {

  //     const coverRefMaterial = coverRef.current.material as THREE.MeshStandardMaterial;

  //     switch (tableMaterial) {
  //       case MaterialTypes.default: 
  //       {
  //         // coverRefMaterial.color.setStyle(state.tableCoverColor, 'srgb');
  //         // coverRefMaterial.map = null;
  //         // coverRefMaterial.displacementMap = null;
  //         // coverRefMaterial.metalnessMap = null;
  //         // coverRefMaterial.normalMap = null;
  //         // coverRefMaterial.roughnessMap = null;
  //         // coverRefMaterial.needsUpdate = true;
  //       }
  //       break;
  //       case MaterialTypes.v1: 
  //       {
  //         // const [ colorMapV1, displMapV1, metalMapV1, normalMapV1, roughMapV1 ] = v1;

  //         // console.log(v1, coverRef.current.clone())
          
  //         // coverRefMaterial.color.setStyle(state.tableCoverColor, 'srgb');
  //         // coverRefMaterial.map = colorMapV1;
  //         // // coverRefMaterial.displacementMap = displMapV1;
  //         // coverRefMaterial.metalnessMap = metalMapV1;

  //         // coverRefMaterial.roughnessMap = roughMapV1;
  //         // coverRefMaterial.normalMap = normalMapV1;
  //         // coverRefMaterial.needsUpdate = true;
  //       }
  //       break;
  //       default:
  //         break;
  //     }

  //   }

  // }, [tableMaterial, v1])

  useEffect(() => {

    if (coverRef.current && (state.materials === MaterialTypes.default)) {

      const coverRefMaterial = coverRef.current?.material as THREE.MeshStandardMaterial;

      coverRefMaterial.color.setStyle(tableCoverColor, 'srgb');
      coverRefMaterial.needsUpdate = true;

    }

  }, [tableCoverColor])

  // const getMaps = useCallback((type: string) => {
  //   switch (tableMaterial) {
  //     case MaterialTypes.default:
  //     default:
  //     {
  //       return {
  //         color: _c.setStyle(state.tableCoverColor, 'srgb').clone(),
  //         map: null,
  //         metalnessMap: null,
  //         normalMap: null,
  //         roughnessMap: null
  //       }
  //     }

  //     case MaterialTypes.v1:
  //     {
  //       // const [ colorMapV1, displMapV1, metalMapV1, normalMapV1, roughMapV1 ] = v1;
  //       const textures = type === "desk" ? v1[1] : v1[0]
  //       return {
  //         color: _c.setRGB(1,1,1,'srgb').clone(),
  //         ...textures
  //         // map: metal.map,
  //         // metalnessMap: metal.metalness,
  //         // normalMap: normalMapV1,
  //         // roughnessMap: roughMapV1
  //       }
  //     }
    
  //   }
  // }, [tableMaterial, v1])


  useFrame((state, delta) => {

    if (feetRef) {

      let dist 
      foo.bar = feetRef.current!.position.y;

      switch (tableHeight) {
        case TableHeightTypes.default:
          dist = 0;
          break;
        case TableHeightTypes.h1:
          dist = 0.2;
        break;

        case TableHeightTypes.h2:
          dist = 0.5;
        break;
        case TableHeightTypes.h3:
          dist = 0.8;
        break;    
        default:
          dist = 0;
          break;
      }


      damp(foo, "bar", dist, 0.8, delta);

      feetRef.current!.position.y = foo.bar;
      coverRef.current!.position.y = foo.bar;
      displayRef.current!.position.y = foo.bar;


    }

  })

  return (
    null
    // <group {...props} dispose={null}>
    //   <group name="Scene">
    //     <group name="upper_frame_low" userData={{ name: 'upper_frame_low' }}>
    //       <mesh
    //         ref={feetRef}
    //         name="Cube018"
    //         castShadow
    //         receiveShadow
    //         geometry={nodes.Cube018.geometry}
    //         // material={materials.main_body}
    //       >
    //         {(() => {
    //           switch(tableMaterial) {
    //             case MaterialTypes.default:
    //             default:
    //               return (
    //                 <meshStandardMaterial 
    //                   color={materials.main_body.color}
    //                 />
    //               )
    //             case MaterialTypes.v1:
    //               return (
    //                 <meshStandardMaterial 
    //                   color={_c.setRGB(1,1,1,'srgb').clone()}
    //                   metalness={0.7}
    //                   roughness={0.2}
    //                   {...v1[0]}
    //                 />
    //               )
    //           }
    //         })()}
    //       </mesh>
    //       <mesh
    //         ref={displayRef}
    //         name="Cube018_1"
    //         castShadow
    //         receiveShadow
    //         geometry={nodes.Cube018_1.geometry}
    //         // material={materials.small_screen}
    //       >
    //         <meshStandardMaterial color={'blue'} />
    //       </mesh>
    //     </group>
    //     <mesh
    //       ref={coverRef}
    //       name="Desk_low"
    //       castShadow
    //       receiveShadow
    //       geometry={nodes.Desk_low.geometry}
    //       // material={materials.main_body}
    //       userData={{ name: 'Desk_low' }}
    //     >
    //       {(() => {
    //         switch(tableMaterial) {
    //           case MaterialTypes.default:
    //           default:
    //             return (
    //               <meshStandardMaterial 
    //                 color={materials.main_body.color}
    //                 metalness={0.5}
    //                 roughness={0.4}
    //               />
    //             )
    //           case MaterialTypes.v1:
    //             return (
    //               <meshStandardMaterial 
    //                 color={_c.setStyle(state.tableCoverColor, 'srgb').clone()}
    //                 // metalness={0.7}
    //                 roughness={0.8}
    //                 {...v1[1]}
    //               />
    //             )
    //         }
    //       })()}
    //     </mesh>
    //     <mesh
    //       name="feet_low"
    //       castShadow
    //       receiveShadow
    //       geometry={nodes.feet_low.geometry}
    //       // material={materials.main_body}
    //       userData={{ name: 'feet_low' }}
    //     >
    //       <meshStandardMaterial 
    //         color={_c.setRGB(tableLegsColor.r/255, tableLegsColor.g/255, tableLegsColor.b/255, 'srgb').clone()} 
    //       />
    //     </mesh>
    //   </group>
    // </group>
  )
}

useGLTF.preload('/models/standing_desk.glb')
