/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useCallback, useRef } from 'react'
import { Color, Group, Mesh, MeshStandardMaterial, Vector3 } from 'three'
import { GLTF } from 'three-stdlib'
import { damp3 } from 'maath/easing'
import { MaterialTypes, TableHeightTypes } from '../../helpers/types'
import { state } from '../../store'
import { useSnapshot } from 'valtio'
import { useTableTextures } from '../../hooks/useTableTextures'

type GLTFResult = GLTF & {
  nodes: {
    feet_low: Mesh
    Cube009: Mesh
    Cube009_1: Mesh
    controller_buttons: Mesh
    motor_cable: Mesh
    controller_cable: Mesh
    upper_frame_low001: Mesh
    upper_frame_low004: Mesh
    upper_frame_low007: Mesh
    upper_frame_low008: Mesh
    upper_frame_low003: Mesh
    upper_frame_low002: Mesh
    Desk_low: Mesh
    Desk_low001: Mesh
    Desk_low002: Mesh
    Desk_low003: Mesh
    upper_frame_low006: Mesh
    upper_frame_low011: Mesh
  }
  materials: {
    main_body: MeshStandardMaterial
    small_screen: MeshStandardMaterial
  }
}

const _v3: [number, number, number] = [0, 0, 0];
const _c = new Color();

export const StandingDesk = (props: JSX.IntrinsicElements['group']) => {

  const { nodes, materials } = useGLTF('/models/standing_desk2.glb') as GLTFResult;
  const {tableLegsColor, tableCoverColor, materials: tableMaterial} = useSnapshot(state);

  const dynamicRef = useRef<Group | null>(null);

  const { metal, wood, plastic } = useTableTextures();

  useFrame((_, delta) => {

    if (dynamicRef.current) {

        switch (state.tableHeight) {
            case TableHeightTypes.default:
            default:
                _v3[1] = 0;
            break;
            case TableHeightTypes.h1:
                _v3[1] = 0.2;
            break;
            case TableHeightTypes.h2:
                _v3[1] = 0.5;
            break;
            case TableHeightTypes.h3:
                _v3[1] = 0.8;
            break;    
        }

        damp3(dynamicRef.current.position, _v3, 0.8, delta);

    }

  });

  const getMetal = useCallback(() => (
    <>
        <meshStandardMaterial 
            color={tableCoverColor}
            metalness={0.9}
            roughness={0.4}
            {...metal}
        />
    </>
  ), [tableCoverColor, metal]);

  const getPlastic = useCallback(() => (
    <>
        <meshStandardMaterial 
            color={'#353934'}
            // displacementScale={0}
            roughness={0.3}
            metalness={0.9}
            // {...plastic}
        />
    </>
  ), []);


  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        <group name="Scene_Collection" userData={{ name: 'Scene Collection' }}>
          <group name="feet" userData={{ name: 'feet' }}>
            <mesh
              name="feet_low"
              castShadow
              receiveShadow
              geometry={nodes.feet_low.geometry}
            //   material={materials.main_body}
              userData={{ name: 'feet_low' }}
            >
                <meshStandardMaterial
                    color={_c.setRGB(0,0,0, 'srgb').clone()}
                    roughness={0.8}
                    metalness={0.3}
                />
            </mesh>
          </group>
          <group ref={dynamicRef} name="dynamic" userData={{ name: 'dynamic' }}>
            <group name="controller" userData={{ name: 'controller' }}>
              <group name="controller_box" userData={{ name: 'controller_box' }}>
                    <mesh
                        name="Cube009"
                        castShadow
                        receiveShadow
                        geometry={nodes.Cube009.geometry}
                        // material={materials.main_body}
                    >
                    {getPlastic()}
                    </mesh>
                    <mesh
                        name="Cube009_1"
                        castShadow
                        receiveShadow
                        geometry={nodes.Cube009_1.geometry}
                        // material={materials.small_screen}
                    >
                    {getPlastic()}
                    </mesh>
              </group>
                <mesh
                    name="controller_buttons"
                    castShadow
                    receiveShadow
                    geometry={nodes.controller_buttons.geometry}
                    material={materials.main_body}
                    userData={{ name: 'controller_buttons' }}
                />
            </group>
            <group name="cables" userData={{ name: 'cables' }}>
                <mesh
                    name="motor_cable"
                    castShadow
                    receiveShadow
                    geometry={nodes.motor_cable.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'motor_cable' }}
                >
                    <meshStandardMaterial 
                        color={_c.setRGB(0, 0, 0, 'srgb').clone()}
                        roughness={0.8}
                    />
                </mesh>
                <mesh
                    name="controller_cable"
                    castShadow
                    receiveShadow
                    geometry={nodes.controller_cable.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'controller_cable' }}
                >
                    <meshStandardMaterial 
                        color={_c.setRGB(0, 0, 0, 'srgb').clone()}
                        roughness={0.8}
                    />
                </mesh>
            </group>
            <group name="metal" userData={{ name: 'metal' }}>
                <mesh
                    name="upper_frame_low001"
                    castShadow
                    receiveShadow
                    geometry={nodes.upper_frame_low001.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'upper_frame_low.001' }}
                >
                    {getMetal()}
                </mesh>
                <mesh
                    name="upper_frame_low004"
                    castShadow
                    receiveShadow
                    geometry={nodes.upper_frame_low004.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'upper_frame_low.004' }}
                >
                   {getMetal()}
                </mesh>
                <mesh
                    name="upper_frame_low007"
                    castShadow
                    receiveShadow
                    geometry={nodes.upper_frame_low007.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'upper_frame_low.007' }}
                >
                   {getMetal()}
                </mesh>
                <mesh
                    name="upper_frame_low008"
                    castShadow
                    receiveShadow
                    geometry={nodes.upper_frame_low008.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'upper_frame_low.008' }}
                >
                   {getMetal()}
                </mesh>
                <mesh
                    name="upper_frame_low003"
                    castShadow
                    receiveShadow
                    geometry={nodes.upper_frame_low003.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'upper_frame_low.003' }}
                >
                   {getMetal()}
                </mesh>
                <mesh
                    name="upper_frame_low002"
                    castShadow
                    receiveShadow
                    geometry={nodes.upper_frame_low002.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'upper_frame_low.002' }}
                >
                    {getMetal()}
                 </mesh>
            </group>
            <group name="desk" userData={{ name: 'desk' }}>
                <mesh
                    name="Desk_low"
                    castShadow
                    receiveShadow
                    geometry={nodes.Desk_low.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'Desk_low' }}
                >
                    {getPlastic()}
                </mesh>
                <mesh
                    name="Desk_low001"
                    castShadow
                    receiveShadow
                    geometry={nodes.Desk_low001.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'Desk_low.001' }}
                >
                    {getPlastic()}
                </mesh>
                <mesh
                    name="Desk_low002"
                    castShadow
                    receiveShadow
                    geometry={nodes.Desk_low002.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'Desk_low.002' }}
                >
                    {(() => {
                        switch(tableMaterial) {
                            case MaterialTypes.default:
                            default:
                            return (
                                <meshStandardMaterial 
                                    color={tableCoverColor}
                                    metalness={0.6}
                                    roughness={0.4}

                                />
                            )
                            case MaterialTypes.v1:
                            return (
                                <meshStandardMaterial 
                                    // color={_c.setRGB(0,0,0,'srgb').clone()}
                                    color={tableCoverColor}
                                    metalness={0.7}
                                    roughness={0.2}
                                    displacementScale={0}
                                    {...wood[0]}
                                />
                            )
                            case MaterialTypes.v2:
                            return (
                                <meshStandardMaterial 
                                    // color={_c.setRGB(0,0,0,'srgb').clone()}
                                    color={tableCoverColor}
                                    metalness={0.3}
                                    roughness={0.8}
                                    displacementScale={0}
                                    {...wood[1]}
                                />
                            )
                        }
                    })()}
                </mesh>
                <mesh
                    name="Desk_low.003"
                    castShadow
                    receiveShadow
                    geometry={nodes.Desk_low003.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'Desk_low.003' }}
                >
                    {getPlastic()}
                </mesh>
            </group>
            <group name="motors" userData={{ name: 'motors' }}>
                <mesh
                    name="upper_frame_low006"
                    castShadow
                    receiveShadow
                    geometry={nodes.upper_frame_low006.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'upper_frame_low.006' }}
                >
                    {getPlastic()}
                </mesh>
                <mesh
                    name="upper_frame_low011"
                    castShadow
                    receiveShadow
                    geometry={nodes.upper_frame_low011.geometry}
                    // material={materials.main_body}
                    userData={{ name: 'upper_frame_low.011' }}
                >
                    {getPlastic()}
                </mesh>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/standing_desk2.glb');

